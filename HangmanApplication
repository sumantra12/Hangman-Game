/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hangmangame;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author sumantra
 */
public class Hangman {
    
    String mysteryWord;
    StringBuilder currentGuess;
    ArrayList<Character> previoursGuesses = new ArrayList<>();
    
    int maxTries = 6; 
    int currentTry= 0;
    
    
    ArrayList<String> dictionary = new ArrayList<>();
    
    private static FileReader fileReader;
    private static BufferedReader bufferedFileReader;
    
    
    public void Hangman() throws IOException {
        initializeStreams();
        mysteryWord = pickWord();
        currentGuess = initailizeCurrentGuess();

    }
    
    public void initializeStreams() throws IOException {
        
        try{
            File inFile = new File("words.rtd");
            fileReader = new FileReader(inFile);
            bufferedFileReader = new BufferedReader(fileReader);
            String currentLine = bufferedFileReader.readLine();
            while(currentLine !=null){
                dictionary.add(currentLine);
                currentLine = bufferedFileReader.readLine();
           }
            bufferedFileReader.close();
            fileReader.close();
            
            
        }catch(IOException e){
            System.out.println("Could no init Streams");
        }

    }
    
    public String pickWord(){
        
        Random rand = new Random();
        int wordIndex = Math.abs(rand.nextInt()) % dictionary.size();
        return dictionary.get(wordIndex);
        
    }
    
    // _ A _ _ _ _ 
    
    public StringBuilder initailizeCurrentGuess() {
        
        StringBuilder current = new StringBuilder();
        
        for (int i=0; i<mysteryWord.length() * 2; i++){
            if(i % 2 == 0){
                current.append("_");
            }else{
                current.append(" ");
            }
            
        }
        return current;        
    }
    
    public String getFormalCurrentGuess(){
        
        return "Current Guess: " + currentGuess.toString();
        
    }
    
    public boolean gameOver(){
        
         return true;
    }
    
    
    //" - - - - -\n"+
    //"|        |\n"+
    //"|        O\n" +
    //"|      / | \\ \n"+
    //"|        |\n" +
    //"|       / \\ \n" +
    //"|\n" +
    //"|\n";
     
    
    public String drawPicture() {
        
        switch(currentTry){
            
            case 0: return noPersonDraw();
            case 1: return addHeadDraw();
            case 2: return addBodyDraw();
            case 3: return addArmDraw();
            case 4: return addArm2Draw();
            case 5: return addLegDraw();
            default: return fullPersonDraw();
            
            
            
            
        }
   
    }

    private String noPersonDraw() {
        
       
  return" - - - - -\n"+
        "|        |\n"+
        "|        \n" +
        "|       \n"+
        "|        \n" +
        "|        \n" +
        "|\n" +
        "|\n";
        
        
    }

    private String addHeadDraw() {
        
        return   " - - - - -\n"+
                 "|        |\n"+
                 "|        O\n" +
                 "|       \n"+
                 "|        \n" +
                 "|        \n" +
                 "|\n" +
                 "|\n";
        
    }

    private String addBodyDraw() {
    return " - - - - -\n"+
          "|        |\n"+
          "|        O\n" +
          "|        |  \n"+
          "|        |n" +
          "|        \n" +
          "|\n" +
          "|\n";
    }

    private String addArmDraw() {
          return " - - - - -\n"+
                 "|        |\n"+
                 "|        O\n" +
                 "|      / |  \n"+
                 "|        |\n" +
                 "|        \n" +
                 "|\n" +
                 "|\n";
    }

    private String addArm2Draw() {
        
         return " - - - - -\n"+
                "|        |\n"+
                "|        O\n" +
                "|      / | \\ \n"+
                "|        |\n" +
                "|        \n" +
                "|\n" +
                "|\n";
        
        
    }
    
       private String addLegDraw() {
        
         return " - - - - -\n"+
                "|        |\n"+
                "|        O\n" +
                "|      / | \\ \n"+
                "|        |\n" +
                "|       /  \n" +
                "|\n" +
                "|\n";
        
    }

    private String fullPersonDraw() {
        
         return " - - - - -\n"+
                "|        |\n"+
                "|        O\n" +
                "|      / | \\ \n"+
                "|        |\n" +
                "|       / \\ \n" +
                "|\n" +
                "|\n";
        
    }

 
    
    
    
}
